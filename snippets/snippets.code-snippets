{
	"fetch": {
		"prefix": "!fetch",
		"body": [
			"fetch('${1:url}')",
			"",
			"\t.then(response => response.json())",
			"",
			"\t.then(data => console.log(data))",
			"",
			"\t.catch(error => console.log(error));"
		],
		"description": "fetch"
	},
	"fetch with async await": {
		"prefix": "!fetch await try catch",
		"body": [
			"const fetchData = async () => {",
			"",
			"\ttry {",
			"",
			"\t\tconst response = await fetch('${1:url}');",
			"",
			"\t\tconst data = await response.json();",
			"",
			"\t\tconsole.log(data);",
			"",
			"\t} catch (error) {",
			"",
			"\t\tconsole.log(error);",
			"",
			"\t}",
			"",
			"};"
		],
		"description": "fetch with async await"
	},
	"fetch without try catch": {
		"prefix": "!fetch no try catch",
		"body": [
			"const fetchData = async () => {",
			"",
			"\tconst response = await fetch('${1:url}');",
			"",
			"\tconst data = await response.json();",
			"",
			"\tconsole.log(data);",
			"",
			"};"
		],
		"description": "fetch without try catch"
	},
	"fetch with immediately invoked function expression": {
		"prefix": "!fetch iife",
		"body": [
			"(async () => {",
			"",
			"\tconst response = await fetch('${1:url}');",
			"",
			"\tconst data = await response.json();",
			"",
			"\tconsole.log(data);",
			"",
			"})();"
		],
		"description": "fetch with immediately invoked function expression"
	},
	"fetch with immediately invoked function expression and try catch": {
		"prefix": "!fetch iife try catch",
		"body": [
			"(async () => {",
			"",
			"\ttry {",
			"",
			"\t\tconst response = await fetch('${1:url}');",
			"",
			"\t\tconst data = await response.json();",
			"",
			"\t\tconsole.log(data);",
			"",
			"\t} catch (error) {",
			"",
			"\t\tconsole.log(error);",
			"",
			"\t}",
			"",
			"})();"
		],
		"description": "fetch with immediately invoked function expression and try catch"
	},
	"fetch with immediately invoked function expression without assync": {
		"prefix": "!fetch iife no async",
		"body": [
			"(() => {",
			"",
			"\tfetch('${1:url}')",
			"",
			"\t\t.then(response => response.json())",
			"",
			"\t\t.then(data => console.log(data))",
			"",
			"\t\t.catch(error => console.log(error));",
			"",
			"})();"
		],
		"description": "fetch with immediately invoked function expression without assync"
	},
	"fetch with immediately invoked function expression without try catch and async": {
		"prefix": "!fetch iife no try catch no async",
		"body": [
			"(() => {",
			"",
			"\tfetch('${1:url}')",
			"",
			"\t\t.then(response => response.json())",
			"",
			"\t\t.then(data => console.log(data))",
			"",
			"\t\t.catch(error => console.log(error));",
			"",
			"})();"
		],
		"description": "fetch with immediately invoked function expression without try catch and async"
	},
  "axios":{
    "prefix": "!axios",
    "body": [
      "axios.get('${1:url}')",
      "",
      "\t.then(response => console.log(response.data))",
      "",
      "\t.catch(error => console.log(error));"
    ],
    "description": "axios"
  },
  "axios with async await":{
    "prefix": "!axios await try catch",
    "body": [
      "const fetchData = async () => {",
      "",
      "\ttry {",
      "",
      "\t\tconst response = await axios.get('${1:url}');",
      "",
      "\t\tconsole.log(response.data);",
      "",
      "\t} catch (error) {",
      "",
      "\t\tconsole.log(error);",
      "",
      "\t}",
      "",
      "};"
    ],
    "description": "axios with async await"
  },
  "axios with immediately invoked function expression":{
    "prefix": "!axios iife",
    "body": [
      "(async () => {",
      "",
      "\tconst response = await axios.get('${1:url}');",
      "",
      "\tconsole.log(response.data);",
      "",
      "})();"
    ],
    "description": "axios with immediately invoked function expression"
  },
  "axios with immediately invoked function expression and try catch":{
    "prefix": "!axios iife try catch",
    "body": [
      "(async () => {",
      "",
      "\ttry {",
      "",
      "\t\tconst response = await axios.get('${1:url}');",
      "",
      "\t\tconsole.log(response.data);",
      "",
      "\t} catch (error) {",
      "",
      "\t\tconsole.log(error);",
      "",
      "\t}",
      "",
      "})();"
    ],
    "description": "axios with immediately invoked function expression and try catch"
  },
  "axios with immediately invoked function expression without try catch":{
    "prefix": "!axios iife no try catch",
    "body": [
      "(async () => {",
      "",
      "\tconst response = await axios.get('${1:url}');",
      "",
      "\tconsole.log(response.data);",
      "",
      "})();"
    ],
    "description": "axios with immediately invoked function expression without try catch"
  },
  "axios with immediately invoked function expression without try catch and async":{
    "prefix": "!axios iife no try catch no async",
    "body": [
      "(() => {",
      "",
      "\taxios.get('${1:url}')",
      "",
      "\t\t.then(response => console.log(response.data));",
      "",
      "\t\t.catch(error => console.log(error));",
      "",
      "})();"
    ],
    "description": "axios with immediately invoked function expression without try catch and async"
  },
  "axios with async await without try catch":{
    "prefix": "!axios await no try catch",
    "body": [
      "const fetchData = async () => {",
      "",
      "\tconst response = await axios.get('${1:url}');",
      "",
      "\tconsole.log(response.data);",
      "",
      "};"
    ],
    "description": "axios with async await without try catch"
  },
  // fetch all methods with async await
  "fetch post":{
    "prefix": "!fetch post",
    "body": [
      "fetch('${1:url}', {",
      "",
      "\tmethod: 'POST',",
      "",
      "\theaders: {",
      "",
      "\t\t'Content-Type': 'application/json'",
      "",
      "\t},",
      "",
      "\tbody: JSON.stringify(${2:data})",
      "",
      "})",
      "",
      "\t.then(response => response.json())",
      "",
      "\t.then(data => console.log(data))",
      "",
      "\t.catch(error => console.log(error));"
    ],
    "description": "fetch post"
  },
  "fetch put": {
    "prefix": "!fetch put",
    "body": [
      "fetch('${1:url}', {",
      "",
      "\tmethod: 'PUT',",
      "",
      "\theaders: {",
      "",
      "\t\t'Content-Type': 'application/json'",
      "",
      "\t},",
      "",
      "\tbody: JSON.stringify(${2:data})",
      "",
      "})",
      "",
      "\t.then(response => response.json())",
      "",
      "\t.then(data => console.log(data))",
      "",
      "\t.catch(error => console.log(error));"
    ],
    "description": "fetch put"
  },
  "fetch delete": {
    "prefix": "!fetch delete",
    "body": [
      "fetch('${1:url}', {",
      "",
      "\tmethod: 'DELETE',",
      "",
      "\theaders: {",
      "",
      "\t\t'Content-Type': 'application/json'",
      "",
      "\t},",
      "",
      "\tbody: JSON.stringify(${2:data})",
      "",
      "})",
      "",
      "\t.then(response => response.json())",
      "",
      "\t.then(data => console.log(data))",
      "",
      "\t.catch(error => console.log(error));"
    ],
    "description": "fetch delete"
  },
  "fetch patch": {
    "prefix": "!fetch patch",
    "body": [
      "fetch('${1:url}', {",
      "",
      "\tmethod: 'PATCH',",
      "",
      "\theaders: {",
      "",
      "\t\t'Content-Type': 'application/json'",
      "",
      "\t},",
      "",
      "\tbody: JSON.stringify(${2:data})",
      "",
      "})",
      "",
      "\t.then(response => response.json())",
      "",
      "\t.then(data => console.log(data))",
      "",
      "\t.catch(error => console.log(error));"
    ],
    "description": "fetch patch"
  },
  "fetch get": {
    "prefix": "!fetch get",
    "body": [
      "fetch('${1:url}')",
      "",
      "\t.then(response => response.json())",
      "",
      "\t.then(data => console.log(data))",
      "",
      "\t.catch(error => console.log(error));"
    ],
    "description": "fetch get"
  },
  "fetch post with async": {
    "prefix": "!fetch post await",
    "body": [
      "const fetchData = async () => {",
      "",
      "\tconst response = await fetch('${1:url}', {",
      "",
      "\t\tmethod: 'POST',",
      "",
      "\t\theaders: {",
      "",
      "\t\t\t'Content-Type': 'application/json'",
      "",
      "\t\t},",
      "",
      "\t\tbody: JSON.stringify(${2:data})",
      "",
      "\t});",
      "",
      "\tconst data = await response.json();",
      "",
      "\tconsole.log(data);",
      "",
      "};"
    ],
    "description": "fetch post with async"
  },
  "fetch post with immediately invoked function expression": {
    "prefix": "!fetch post iife",
    "body": [
      "(async () => {",
      "",
      "\tconst response = await fetch('${1:url}', {",
      "",
      "\t\tmethod: 'POST',",
      "",
      "\t\theaders: {",
      "",
      "\t\t\t'Content-Type': 'application/json'",
      "",
      "\t\t},",
      "",
      "\t\tbody: JSON.stringify(${2:data})",
      "",
      "\t});",
      "",
      "\tconst data = await response.json();",
      "",
      "\tconsole.log(data);",
      "",
      "})();"
    ],
    "description": "fetch post with immediately invoked function expression"
  },
  "axios-2":{
    "prefix": "!axios parameter",
    "body": [
      "axios({",
      "",
      "\tmethod: '${1:method}',",
      "",
      "\turl: '${2:url}',",
      "",
      "\tparams: {",
      "",
      "\t\t${3:parameter}",
      "",
      "\t}",
      "",
      "})",
      "",
      "\t.then(response => console.log(response))",
      "",
      "\t.catch(error => console.log(error));"
    ],
    "description": "axios parameter"
  },
  "axios-3":{
    "prefix": "!axios data",
    "body": [
      "axios({",
      "",
      "\tmethod: '${1:method}',",
      "",
      "\turl: '${2:url}',",
      "",
      "\tdata: {",
      "",
      "\t\t${3:data}",
      "",
      "\t}",
      "",
      "})",
      "",
      "\t.then(response => console.log(response))",
      "",
      "\t.catch(error => console.log(error));"
    ],
    "description": "axios data"
  },
  "axios-4":{
    "prefix": "!axios parameter and data",
    "body": [
      "axios({",
      "",
      "\tmethod: '${1:method}',",
      "",
      "\turl: '${2:url}',",
      "",
      "\tparams: {",
      "",
      "\t\t${3:parameter}",
      "",
      "\t},",
      "",
      "\tdata: {",
      "",
      "\t\t${4:data}",
      "",
      "\t}",
      "",
      "})",
      "",
      "\t.then(response => console.log(response))",
      "",
      "\t.catch(error => console.log(error));"
    ],
    "description": "axios parameter and data"
  },
  "axios-post":{
    "prefix": "!axios post",
    "body": [
      "axios({",
      "",
      "\tmethod: 'post',",
      "",
      "\turl: '${1:url}',",
      "",
      "\tdata: {",
      "",
      "\t\t${2:data}",
      "",
      "\t}",
      "",
      "})",
      "",
      "\t.then(response => console.log(response))",
      "",
      "\t.catch(error => console.log(error));"
    ],
    "description": "axios post"
  },
  "axios-put":{
    "prefix": "!axios put",
    "body": [
      "axios({",
      "",
      "\tmethod: 'put',",
      "",
      "\turl: '${1:url}',",
      "",
      "\tdata: {",
      "",
      "\t\t${2:data}",
      "",
      "\t}",
      "",
      "})",
      "",
      "\t.then(response => console.log(response))",
      "",
      "\t.catch(error => console.log(error));"
    ],
    "description": "axios put"
  },
  "axios-delete":{
    "prefix": "!axios delete",
    "body": [
      "axios({",
      "",
      "\tmethod: 'delete',",
      "",
      "\turl: '${1:url}',",
      "",
      "\tdata: {",
      "",
      "\t\t${2:data}",
      "",
      "\t}",
      "",
      "})",
      "",
      "\t.then(response => console.log(response))",
      "",
      "\t.catch(error => console.log(error));"
    ],
    "description": "axios delete"
  },
  "axios-get":{
    "prefix": "!axios get",
    "body": [
      "axios({",
      "",
      "\tmethod: 'get',",
      "",
      "\turl: '${1:url}',",
      "",
      "\tdata: {",
      "",
      "\t\t${2:data}",
      "",
      "\t}",
      "",
      "})",
      "",
      "\t.then(response => console.log(response))",
      "",
      "\t.catch(error => console.log(error));"
    ],
    "description": "axios get"
  },
  "axios-async":{
    "prefix": "!axios async",
    "body": [
      "const getData = async () => {",
      "",
      "\tconst response = await axios({",
      "",
      "\t\tmethod: '${1:method}',",
      "",
      "\t\turl: '${2:url}',",
      "",
      "\t\tdata: {",
      "",
      "\t\t\t${3:data}",
      "",
      "\t\t}",
      "",
      "\t});",
      "",
      "\tconst data = await response.data;",
      "",
      "\tconsole.log(data);",
      "",
      "};"
    ],
    "description": "axios async"
  },
  "axios-async-2":{
    "prefix": "!axios async parameter",
    "body": [
      "const getData = async () => {",
      "",
      "\tconst response = await axios({",
      "",
      "\t\tmethod: '${1:method}',",
      "",
      "\t\turl: '${2:url}',",
      "",
      "\t\tparams: {",
      "",
      "\t\t\t${3:parameter}",
      "",
      "\t\t}",
      "",
      "\t});",
      "",
      "\tconst data = await response.data;",
      "",
      "\tconsole.log(data);",
      "",
      "};"
    ],
    "description": "axios async parameter"
  },
  "axios-async-3":{
    "prefix": "!axios async data",
    "body": [
      "const getData = async () => {",
      "",
      "\tconst response = await axios({",
      "",
      "\t\tmethod: '${1:method}',",
      "",
      "\t\turl: '${2:url}',",
      "",
      "\t\tdata: {",
      "",
      "\t\t\t${3:data}",
      "",
      "\t\t}",
      "",
      "\t});",
      "",
      "\tconst data = await response.data;",
      "",
      "\tconsole.log(data);",
      "",
      "};"
    ],
    "description": "axios async data"
  },
  "axios-async-4":{
    "prefix": "!axios async parameter and data",
    "body": [
      "const getData = async () => {",
      "",
      "\tconst response = await axios({",
      "",
      "\t\tmethod: '${1:method}',",
      "",
      "\t\turl: '${2:url}',",
      "",
      "\t\tparams: {",
      "",
      "\t\t\t${3:parameter}",
      "",
      "\t\t},",
      "",
      "\t\tdata: {",
      "",
      "\t\t\t${4:data}",
      "",
      "\t\t}",
      "",
      "\t});",
      "",
      "\tconst data = await response.data;",
      "",
      "\tconsole.log(data);",
      "",
      "};"
    ],
    "description": "axios async parameter and data"
  },
  "axios-async-5":{
    "prefix": "!axios async parameter and data and header",
    "body": [
      "const getData = async () => {",
      "",
      "\tconst response = await axios({",
      "",
      "\t\tmethod: '${1:method}',",
      "",
      "\t\turl: '${2:url}',",
      "",
      "\t\tparams: {",
      "",
      "\t\t\t${3:parameter}",
      "",
      "\t\t},",
      "",
      "\t\tdata: {",
      "",
      "\t\t\t${4:data}",
      "",
      "\t\t},",
      "",
      "\t\theaders: {",
      "",
      "\t\t\t${5:header}",
      "",
      "\t\t}",
      "",
      "\t});",
      "",
      "\tconst data = await response.data;",
      "",
      "\tconsole.log(data);",
      "",
      "};"
    ],
    "description": "axios async parameter and data and header"
  },
  "axios get with immediately invoked function expression":{
    "prefix": "!axios get with immediately invoked function expression",
    "body": [
      "(async () => {",
      "",
      "\tconst response = await axios({",
      "",
      "\t\tmethod: 'get',",
      "",
      "\t\turl: '${1:url}',",
      "",
      "\t\tdata: {",
      "",
      "\t\t\t${2:data}",
      "",
      "\t\t}",
      "",
      "\t});",
      "",
      "\tconst data = await response.data;",
      "",
      "\tconsole.log(data);",
      "",
      "})();"
    ],
    "description": "axios get with immediately invoked function expression"
  },
  "axios get with immediately invoked function expression and parameter":{
    "prefix": "!axios get with immediately invoked function expression and parameter",
    "body": [
      "(async () => {",
      "",
      "\tconst response = await axios({",
      "",
      "\t\tmethod: 'get',",
      "",
      "\t\turl: '${1:url}',",
      "",
      "\t\tparams: {",
      "",
      "\t\t\t${2:parameter}",
      "",
      "\t\t}",
      "",
      "\t});",
      "",
      "\tconst data = await response.data;",
      "",
      "\tconsole.log(data);",
      "",
      "})();"
    ],
    "description": "axios get with immediately invoked function expression and parameter"
  },
  "axios get with immediately invoked function expression and data":{
    "prefix": "!axios get with immediately invoked function expression and data",
    "body": [
      "(async () => {",
      "",
      "\tconst response = await axios({",
      "",
      "\t\tmethod: 'get',",
      "",
      "\t\turl: '${1:url}',",
      "",
      "\t\tdata: {",
      "",
      "\t\t\t${2:data}",
      "",
      "\t\t}",
      "",
      "\t});",
      "",
      "\tconst data = await response.data;",
      "",
      "\tconsole.log(data);",
      "",
      "})();"
    ],
    "description": "axios get with immediately invoked function expression and data"
  },
  "axios get with immediately invoked function expression and parameter and data":{
    "prefix": "!axios get with immediately invoked function expression and parameter and data",
    "body": [
      "(async () => {",
      "",
      "\tconst response = await axios({",
      "",
      "\t\tmethod: 'get',",
      "",
      "\t\turl: '${1:url}',",
      "",
      "\t\tparams: {",
      "",
      "\t\t\t${2:parameter}",
      "",
      "\t\t},",
      "",
      "\t\tdata: {",
      "",
      "\t\t\t${3:data}",
      "",
      "\t\t}",
      "",
      "\t});",
      "",
      "\tconst data = await response.data;",
      "",
      "\tconsole.log(data);",
      "",
      "})();"
    ],
    "description": "axios get with immediately invoked function expression and parameter and data"
  },
  "axios get with immediately invoked function expression and parameter and data and header":{
    "prefix": "!axios get with immediately invoked function expression and parameter and data and header",
    "body": [
      "(async () => {",
      "",
      "\tconst response = await axios({",
      "",
      "\t\tmethod: 'get',",
      "",
      "\t\turl: '${1:url}',",
      "",
      "\t\tparams: {",
      "",
      "\t\t\t${2:parameter}",
      "",
      "\t\t},",
      "",
      "\t\tdata: {",
      "",
      "\t\t\t${3:data}",
      "",
      "\t\t},",
      "",
      "\t\theaders: {",
      "",
      "\t\t\t${4:header}",
      "",
      "\t\t}",
      "",
      "\t});",
      "",
      "\tconst data = await response.data;",
      "",
      "\tconsole.log(data);",
      "",
      "})();"
    ],
    "description": "axios get with immediately invoked function expression and parameter and data and header"
  },
  "axios get with immediately invoked function expression and parameter and header":{
    "prefix": "!axios get with immediately invoked function expression and parameter and header",
    "body": [
      "(async () => {",
      "",
      "\tconst response = await axios({",
      "",
      "\t\tmethod: 'get',",
      "",
      "\t\turl: '${1:url}',",
      "",
      "\t\tparams: {",
      "",
      "\t\t\t${2:parameter}",
      "",
      "\t\t},",
      "",
      "\t\theaders: {",
      "",
      "\t\t\t${3:header}",
      "",
      "\t\t}",
      "",
      "\t});",
      "",
      "\tconst data = await response.data;",
      "",
      "\tconsole.log(data);",
      "",
      "})();"
    ],
    "description": "axios get with immediately invoked function expression and parameter and header"
  },
  "axios post with immediately invoked function expression":{
    "prefix": "!axios post with immediately invoked function expression",
    "body": [
      "(async () => {",
      "",
      "\tconst response = await axios({",
      "",
      "\t\tmethod: 'post',",
      "",
      "\t\turl: '${1:url}',",
      "",
      "\t\tdata: {",
      "",
      "\t\t\t${2:data}",
      "",
      "\t\t}",
      "",
      "\t});",
      "",
      "\tconst data = await response.data;",
      "",
      "\tconsole.log(data);",
      "",
      "})();"
    ],
    "description": "axios post with immediately invoked function expression"
  },
}
